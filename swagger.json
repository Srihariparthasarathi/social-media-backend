{
    "openapi": "3.1.0",
    "info": {
        "title": "Social Media API",
        "description": "API documentation for the Social Media platform",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:3100/api/",
            "description": "Development server"
        }
    ],
    "components": {
        "securitySchemes": {
          "X-API-KEY": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": "JWT token for authentication (without the \"Bearer\" prefix)"
          }
        }
      },
      "security": [
        {
          "X-API-KEY": []
        }
      ],
    
    "paths": {
        "/users/signup": {
            "post": {
                "tags": ["User Management"],
                "summary": "User registration",
                "description": "Allows a new user to register by providing required details such as name, email, and password. Upon successful registration, a new user account will be created in the system.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "Username must be between 3 and 20 characters and can contain only letters and numbers",
                                        "minLength": 3,
                                        "maxLength": 20,
                                        "pattern": "^[a-zA-Z0-9]+$"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "The user's email address",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "Password must be at least 8 characters long and include an uppercase letter, a lowercase letter, a number, and a special character.",
                                        "minLength": 8,
                                        "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]{8,}$"
                                    }
                                },
                                "required": ["username", "email", "password"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "userId": {
                                            "type": "integer",
                                            "description": "The unique identifier of the newly created user.",
                                            "example": 1
                                        },
                                        "username": {
                                            "type": "string",
                                            "description": "The name of the newly created user.",
                                            "example": "johndoe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "description": "The email address of the newly created user.",
                                            "example": "user@example.com"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request due to missing or invalid fields or created with existing email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "description": "Error message describing the detail information of the bad request",
                                            "example": "Email is already taken"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/signin": {
            "post": {
                "tags": ["User Management"],
                "summary": "User Login",
                "description": "Allows users to log in by providing their email and password. Returns an authentication token upon successful login.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "The user's email address",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "The user's password.",
                                        "example": "StrongPassword@123"
                                    }
                                },
                                "required": ["email", "password"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User successfully logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "description": "The JWT authentication token.",
                                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                        },
                                        "user": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "description": "The unique identifier of the user.",
                                                    "example": 1
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "description": "The email address of the user.",
                                                    "example": "user@example.com"
                                                },
                                                "username": {
                                                    "type": "string",
                                                    "description": "The username of the user.",
                                                    "example": "srihari"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "description": "Error message describing the reason for login failure.",
                                            "example": "Invalid email or password"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/posts/all": {
            "get": {
              "tags": ["Posts"],
              "summary": "Retrieve all posts",
              "description": "Get a list of all posts made by users on the platform.",
              "responses": {
                "200": {
                  "description": "Successfully retrieved the posts",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "posts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "description": "The unique identifier for the post"
                                },
                                "userid": {
                                  "type": "integer",
                                  "description": "The ID of the user who created the post"
                                },
                                "caption": {
                                  "type": "string",
                                  "description": "The caption or description of the post"
                                },
                                "imageurl": {
                                  "type": "string",
                                  "description": "The URL of the image associated with the post"
                                }
                              }
                            }
                          }
                        }
                      },
                      "example": {
                        "posts": [
                          {
                            "id": 1,
                            "userid": 1,
                            "caption": "My first post on this platform!",
                            "imageurl": "http://example.com/image1.jpg"
                          },
                          {
                            "id": 2,
                            "userid": 1,
                            "caption": "Had a great day at the beach.",
                            "imageurl": "http://example.com/image2.jpg"
                          }
                        ]
                      }
                    }
                  }
                },
                "404": {
                  "description": "No posts found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "description": "Error message when no posts exist"
                          }
                        },
                        "example": {
                          "error": "There are no posts yet. Be the first to share and make your mark!"
                        }
                      }
                    }
                  }
                }
              }
            }
        },
        "/posts/{id}": {
            "get": {
              "tags": ["Posts"],
              "summary": "Get a post by its ID",
              "description": "Fetches a post by its ID. If the post exists, it returns the post details. Otherwise, it returns a 404 error.",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 1
                  },
                  "description": "ID of the post"
                }
              ],
              "responses": {
                "200": {
                  "description": "Post found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "posts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "example": 1
                                },
                                "userid": {
                                  "type": "integer",
                                  "example": 1
                                },
                                "caption": {
                                  "type": "string",
                                  "example": "My first post on this platform!"
                                },
                                "imageurl": {
                                  "type": "string",
                                  "example": "http://example.com/image1.jpg"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Post not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Please check the post ID and try again. No post found with ID: 3"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "put": {
              "tags": ["Posts"],
              "summary": "Update post",
              "description": "Update post for the authenticated user with an image and caption. Requires a valid JWT token in the Authorization header.",
              "parameters": [
                {
                  "name": "Authorization",
                  "in": "header",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": "your_jwt_token_here"
                  },
                  "description": "JWT token for authentication"
                },
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": "1"
                  },
                  "description": "ID of the post to update"
                }
              ],
              "requestBody": {
                "required": false,
                "content": {
                  "multipart/form-data": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "image": {
                          "type": "string",
                          "format": "binary",
                          "description": "Image file to upload. Supported formats: PNG, JPG, JPEG.",
                          "example": "example.png",
                          "nullable": true
                        },
                        "caption": {
                          "type": "string",
                          "description": "Caption for the post. Must be between 5 and 2200 characters, cannot contain prohibited words, too many hashtags (max 30), emojis (max 50), or special symbols.",
                          "example": "My first post on this platform!",
                           "nullable": true
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Post updated",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "userid": {
                            "type": "integer",
                            "example": 1
                          },
                          "caption": {
                            "type": "string",
                            "example": "My first post on this platform!"
                          },
                          "imageurl": {
                            "type": "string",
                            "example": "http://example.com/image1.jpg"
                          }
                        }
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized - JWT missing or invalid",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Authentication token is missing or invalid. Please provide a valid token in the Authorization header."
                          }
                        }
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Forbidden - You don't have access to update this post"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Post not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Please check the post ID and try again. No post found with ID: 123."
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request - Invalid user ID or account deleted",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Invalid user ID or account deleted. Please check the user ID and try again."
                          }
                        }
                      }
                    }
                  }
                },
                "415": {
                  "description": "Unsupported Media Type and size exceed",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Invalid mime type. Only PNG, JPG, and JPEG files are supported or File size exceeds the 5MB limit."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "delete": {
              "tags": ["Posts"],
              "summary": "delete post",
              "description": "Update post for the authenticated user with an image and caption. Requires a valid JWT token in the Authorization header.",
              "parameters": [
                {
                  "name": "Authorization",
                  "in": "header",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": "your_jwt_token_here"
                  },
                  "description": "JWT token for authentication"
                },
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": "1"
                  },
                  "description": "ID of the post to update"
                }
              ],
              "responses": {
                "204": {
                  "description": "Post deleted"
                },
                "401": {
                  "description": "Unauthorized - JWT missing or invalid",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Authentication token is missing or invalid. Please provide a valid token in the Authorization header."
                          }
                        }
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Forbidden - You don't have access to delete this post"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Post not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Please check the post ID and try again. No post found with ID: 1"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request - Invalid user ID or account deleted",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Invalid user ID or account deleted. Please check the user ID and try again."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
        },
        "/posts": {
            "get": {
              "tags": ["Posts"],
              "summary": "Get all posts",
              "description": "Fetches all posts of the authenticated user. If no posts are created, a message is returned. Requires a valid JWT token in the Authorization header.",
              "parameters": [
                {
                    "name": "Authorization",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "example": "your_jwt_token_here"
                    },
                    "description": "JWT token for authentication"
                  }
              ],
              "responses": {
                "200": {
                  "description": "Posts found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "posts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "example": 1
                                },
                                "userid": {
                                  "type": "integer",
                                  "example": 1
                                },
                                "caption": {
                                  "type": "string",
                                  "example": "My first post on this platform!"
                                },
                                "imageurl": {
                                  "type": "string",
                                  "example": "http://example.com/image1.jpg"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "No posts found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "You haven't created any posts yet. Hurry up and share your first one!"
                          }
                        }
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized - JWT missing or invalid",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Authentication token is missing. Please provide a valid token in the Authorization header."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "tags": ["Posts"],
              "summary": "Create new post",
              "description": "Create a new post for the authenticated user with an image and caption. Requires a valid JWT token in the Authorization header.",
              "parameters": [
                {
                  "name": "Authorization",
                  "in": "header",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": "your_jwt_token_here"
                  },
                  "description": "JWT token for authentication"
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "multipart/form-data": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "image": {
                          "type": "string",
                          "format": "binary",
                          "description": "Image file to upload. Supported formats: PNG, JPG, JPEG.",
                          "example": "example.png"
                        },
                        "caption": {
                          "type": "string",
                          "description": "Caption for the post. Must be between 5 and 2200 characters, cannot contain prohibited words, too many hashtags (max 30), emojis (max 50), or special symbols.",
                          "example": "My first post on this platform!"
                        }
                      },
                      "required": ["image", "caption"]
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Post Created",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "userid": {
                            "type": "integer",
                            "example": 1
                          },
                          "caption": {
                            "type": "string",
                            "example": "My first post on this platform!"
                          },
                          "imageurl": {
                            "type": "string",
                            "example": "http://example.com/image1.jpg"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request - Validation failed",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Caption must be between 5 and 2200 characters. Caption contains prohibited words or exceeds limits for hashtags, emojis, or special symbols."
                          }
                        }
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized - JWT missing or invalid",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Authentication token is missing or invalid. Please provide a valid token in the Authorization header."
                          }
                        }
                      }
                    }
                  }
                },
                "415": {
                  "description": "Unsupported Media Type and size exceed",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Invalid mime type. Only PNG, JPG, and JPEG files are supported or File size exceeds the 5MB limit."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
        },
        "/comments/{id}": {
            "get": {
    "tags": ["comments"],
    "summary": "Retrieve all comments based on Post ID",
    "description": "Fetches comments by Post ID. If comments exist, it returns all comments belonging to the specified post. Otherwise, it returns a 404 error.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "1"
        },
        "description": "ID of the post to retrieve comments for"
      }
    ],
    "responses": {
      "200": {
        "description": "Comments retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 1
                      },
                      "userId": {
                        "type": "integer",
                        "example": 1
                      },
                      "postId": {
                        "type": "integer",
                        "example": 1
                      },
                      "content": {
                        "type": "string",
                        "example": "Amazing post!"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Comments not found for this post",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Please check the post ID and try again. No comments found for post ID: 3"
                }
              }
            }
          }
        }
      }
    }
            },
            "post": {
                "tags": ["comments"],
                "summary": "Create new comment for post",
                "description": "Create a new comment for the post with content. Requires a valid JWT token in the Authorization header.",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "example": "1"
                    },
                    "description": "ID of the post to create a comment for"
                  },
                  {
                    "name": "Authorization",
                    "in": "header",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "example": "your_jwt_token_here"
                    },
                    "description": "JWT token for authentication"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "content": {
                            "type": "string",
                            "description": "Comment for the post. Must be 1-500 characters long and must not contain prohibited words.",
                            "example": "wonderful post"
                          }
                        },
                        "required": ["content"]
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Comment Created",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "example": 1
                            },
                            "userId": {
                              "type": "integer",
                              "example": 1
                            },
                            "postId": {
                              "type": "integer",
                              "example": 1
                            },
                            "content": {
                              "type": "string",
                              "example": "wonderful post"
                            }
                          }
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Bad Request - Validation failed",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string",
                              "examples": [
                                "Content cannot be empty.",
                                "Invalid value: Content must be between 1 and 500 characters long.",
                                "Please check the post ID and try again. No post found with ID: 3.",
                                "Invalid user ID or account deleted. Please check the user ID and try again."
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Unauthorized - JWT missing or invalid",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string",
                              "example": "Authentication token is missing or invalid. Please provide a valid token in the Authorization header."
                            }
                          }
                        }
                      }
                    }
                  }
                }
            },
            "put": {
              "tags": ["comments"],
              "summary": "Update comment by ID",
              "description": "Update comment for the post with new content. Requires a valid JWT token in the Authorization header.",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": "1"
                  },
                  "description": "ID of the comment to update"
                },
                {
                  "name": "Authorization",
                  "in": "header",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": "your_jwt_token_here"
                  },
                  "description": "JWT token for authentication"
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "description": "update the Comment for the post. Must be 1-500 characters long and must not contain prohibited words.",
                          "example": "looks good"
                        }
                      },
                      "required": ["content"]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Comment updated",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "userId": {
                            "type": "integer",
                            "example": 1
                          },
                          "postId": {
                            "type": "integer",
                            "example": 1
                          },
                          "content": {
                            "type": "string",
                            "example": "wonderful post"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad Request - Validation failed",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "examples": [
                              "Content cannot be empty.",
                              "Invalid value: Content must be between 1 and 500 characters long.",
                              "Invalid user ID or account deleted. Please check the user ID and try again."
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "401": {
                  "description": "Unauthorized - JWT missing or invalid",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Authentication token is missing or invalid. Please provide a valid token in the Authorization header."
                          }
                        }
                      }
                    }
                  }
                },
                "403": {
                  "description": "Forbidden",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Forbidden - You don't have access to update this comment"
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "comment not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Please check the comment ID and try again. No comment found with ID: 123."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

        }

      }
}
